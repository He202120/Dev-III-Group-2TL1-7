import mongoose, { Schema } from "mongoose";
import bcrypt from "bcryptjs";

const playerInfo = mongoose.Schema({

    email: {
        type: mongoose.Schema.Types.ObjectId,
        required: true,
        unique: true,
        ref:"User"
    },
    roles: {
        type: String,
    },
    state: {
        type: String,
    },
    number: {
        type: Number,
        required: true,
        unique: true
    }

},{

    timestamps: true // This will automatically add timestamps for any operations done.

});


// ============= Password Hashing Middleware =============
adminSchema.pre('save', async function (next) {

    if( !this.isModified('password') ) {

        next();

        // If the existing password in user schema was not modified, then avoid hashing and move to next middleware
        // This check is done here because the user schema will have other updates which dosen't involve password updation
        // in that case rehashing password will be skipped

    }

    const salt = await bcrypt.genSalt(10);

    // Hashing the new password using the salt generated by bcrypt
    this.password = await bcrypt.hash(this.password, salt);

});


// ============= Password Verifying Function =============
adminSchema.methods.matchPassword = async function (adminProvidedPassword) {

    const validPassword = await bcrypt.compare(adminProvidedPassword, this.password);

    return validPassword;

};

const playerStat = mongoose.model('playerStat', playerInfo);

export default playerStat;